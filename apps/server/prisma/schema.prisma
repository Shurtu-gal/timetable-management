generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GENDER {
  MALE
  FEMALE
  OTHERS
}

enum ROLE {
  STUDENT
  TEACHER
  ADMIN
  SUPERADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  uid       String   @unique // Roll Number or Employee Id
  firstName String
  lastName  String
  dob       DateTime
  email     String?
  gender    GENDER
  mobile    String?
  profile   String?
  password  String
  role      ROLE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student?
  teacher   Teacher?
  admin     Admin?

  comments Comment[]
}

model Student {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  classId   Int      @unique
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  user            User      @relation(fields: [userId], references: [id])
  department      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lectures        Lecture[]
  collegeId       Int       @unique
  college         College   @relation(fields: [collegeId], references: [id])
  assignedClasses Class[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  collegeId Int      @unique
  college   College  @relation(fields: [collegeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model College {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  admin       Admin?
  teachers    Teacher[]
  classes     Class[]
  courses     Course[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Class {
  id          Int       @id @default(autoincrement())
  name        String
  collegeId   Int       @unique
  college     College   @relation(fields: [collegeId], references: [id])
  description String
  semester    Int
  facultyId     Int
  faculty       Teacher   @relation(fields: [facultyId], references: [id])
  department  String
  lectures    Lecture[]
  students    Student[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Course {
  id          Int       @id @default(autoincrement())
  name        String
  type        String
  credits     Int?
  collegeId   Int       @unique
  college     College   @relation(fields: [collegeId], references: [id])
  description String
  lectures    Lecture[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Lecture {
  name         String
  section      String
  instructorId Int       @unique
  instructor   Teacher   @relation(fields: [instructorId], references: [id])
  courseId     Int
  course       Course    @relation(fields: [courseId], references: [id])
  classId      Int
  class        Class     @relation(fields: [classId], references: [id])
  timeSlot     TimeSlot?
  description  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@id([courseId, classId])
}

model TimeSlot {
  id         Int       @id @default(autoincrement())
  day        String
  startTime  String
  extraClass Boolean?
  date       DateTime?
  endTime    String
  courseId   Int
  classId    Int
  lecture    Lecture?  @relation(fields: [courseId, classId], references: [courseId, classId])
  comments   Comment[]
  room       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([courseId, classId])
}

model Comment {
  id         Int      @id @default(autoincrement())
  text       String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  timeSlotId Int
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
