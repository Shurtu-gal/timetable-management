generator erd {
  provider = "prisma-erd-generator"
  erdDebug = true
  // includeRelationFromFields = true
  output = "./ERD.png"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum Status {
  DRAFT
  PENDING
  ACTIVE
  REJECTED
  EXPIRED
}

enum TaskStatus {
  DRAFT
  ACTIVE
  COMPLETED
}

enum TaskType {
  GIVE_STARS
  TWEET // post on twitter
  INSTA // post on instagram
  LINKEDIN // post on linkedin
  PHOTO // upload photo or screenshot
  VIDEO // upload video
  TEXT // write text
  AUDIO // upload audio
  CODE // upload code
  OTHER // other
}

enum TaskValidationType {
  MANUAL
  AUTOMATIC
  PEER_REVIEW
}

enum SubmissionStatus {
  DRAFT
  PENDING
  REJECTED
  ACCEPTED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Social {
  id        Int     @id @default(autoincrement())
  linkedin  String?
  twitter   String?
  instagram String?
  user      User?
}

model User {
  id          Int          @id @default(autoincrement())
  firstName   String
  lastName    String
  username    String       @unique
  email       String       @unique
  password    String?
  gender      Gender
  profile     String       @default("https://res.cloudinary.com/dx3a3kduq/image/upload/v1/avatars/default.png")
  referrer    String?
  socialId    Int?         @unique
  social      Social?      @relation(fields: [socialId], references: [id])
  role        Role         @default(USER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  // organizedEvents Event[]      @relation("organizers")
  // managedEvents   Event[]      @relation("managers")
  submissions Submission[]
  validations Task[] @relation("validator")

  // Unneeded fields, just for PRISMA to generate the schema
  EventToOrganizer EventToOrganizer[]
  EventToManager   EventToManager[]
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  slug        String    @unique
  poster      String    @default("https://res.cloudinary.com/dx3a3kduq/image/upload/v1/events/default.png")
  startDate   DateTime
  endDate     DateTime
  location    String
  organizerId Int[]
  managerId   Int[]
  // organizers  User[]    @relation("organizers", fields: [organizerId], references: [id])
  // managers    User[]    @relation("managers", fields: [managerId], references: [id])
  prizes      Prize[]
  status      Status    @default(DRAFT)
  contacts    String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  tasks       Task[]  

  // Unneeded fields, just for PRISMA to generate the schema
  EventToOrganizer EventToOrganizer[]
  EventToManager   EventToManager[]
}

model Prize {
  id          Int       @id @default(autoincrement())
  name        String
  amount      Int?
  description String
  event       Event     @relation(fields: [eventId], references: [id])
  eventId     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Task {
  id          Int                @id @default(autoincrement())
  name        String
  tagline     String?
  description String
  eventId     Int
  event       Event              @relation(fields: [eventId], references: [id])
  points      Int                @default(0)
  difficulty  Difficulty         @default(EASY)
  dueDate     DateTime
  status      TaskStatus         @default(DRAFT)
  validator   User?              @relation("validator", fields: [validatorId], references: [id])
  validatorId Int?
  type        TaskType           @default(OTHER)
  validation  TaskValidationType
  tags        String[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  submissions Submission[]
}

model Submission {
  id          Int              @id @default(autoincrement())
  user        User             @relation(fields: [userId], references: [id])
  userId      Int
  task        Task             @relation(fields: [taskId], references: [id])
  taskId      Int
  content     String
  attachments String[]
  status      SubmissionStatus @default(DRAFT)
  points      Int?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
}

// Unneeded models, just for PRISMA to generate the schema

model EventToOrganizer {
  userId  Int
  eventId Int
  User    User  @relation(fields: [userId], references: [id])
  Event   Event @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
  @@map("event_to_organizer")
}

model EventToManager {
  userId  Int
  eventId Int
  User    User  @relation(fields: [userId], references: [id])
  Event   Event @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
  @@map("event_to_manager")
}
